let absurd void = match void with;;

let rec (@) xs ys =
  match xs with
  | [] -> ys
  | x :: xs -> x :: (xs @ ys)

(***********************************
*********** The Parser *************
***********************************)

(********************************
* Effects
********************************)

effect Symbol : string -> string;;
effect Fail : unit -> empty;;
effect Decide : unit -> bool

(********************************
* Handlers
********************************)

let fail () = match (perform (Fail ())) with;;

let parse = handler
    | y -> (fun s ->
        begin match s with
        | [] -> y
        | _ -> fail ()
        end
    )
    | effect (Symbol c) k ->
        fun s ->
        (begin match s with
            | [] -> fail ()
            | (x :: xs) -> if (c = x) then k x xs else fail ()
        end
        )
;;

let allsols = handler
  | x -> [x]
  |  effect (Decide _) k -> k true @ k false
  |  effect (Fail _) _ -> []
;;

let backtrack = handler
    |  effect (Decide _) k ->
        handle k true with
            |  effect (Fail _) _ -> k false
;;
(********************************
* Parser :: string list to int
********************************)

let createNumber (prev, num) = prev * 10 + num;;

let rec parseNum (l, v) =
    begin match l with
    | [] -> v
    | (x :: xs) ->
        begin match x with
        | "0" -> parseNum (xs, (createNumber (v, 0)))
        | "1" -> parseNum (xs, (createNumber (v, 1)))
        | "2" -> parseNum (xs, (createNumber (v, 2)))
        | "3" -> parseNum (xs, (createNumber (v, 3)))
        | "4" -> parseNum (xs, (createNumber (v, 4)))
        | "5" -> parseNum (xs, (createNumber (v, 5)))
        | "6" -> parseNum (xs, (createNumber (v, 6)))
        | "7" -> parseNum (xs, (createNumber (v, 7)))
        | "8" -> parseNum (xs, (createNumber (v, 8)))
        | "9" -> parseNum (xs, (createNumber (v, 9)))
        | _ -> fail ()
        end
    end
;;

let rec toNum l = parseNum (l, 0);;

(********************************
* Parser :: main
********************************)

let digit () =

        let nums = ["0"; "1"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9"] in
        let rec checkNums n =
            begin match n with
            | [] -> fail ()
            | (x :: xs) ->
                if (perform (Decide ())) then (perform (Symbol x)) else (checkNums xs)
            end in
        checkNums nums
;;

let rec many m = if (perform (Decide ())) then (m ()) else ([]);;

let rec many1 () =
    let x = digit () in
    let xs = many many1 in
    [x] @ xs
;;

let rec expr () =
    let rec term () =
        let rec factor () =
            if (perform (Decide ())) then (
                let i = many1 () in
                (toNum i)
            ) else (
                let p = perform (Symbol "(") in
                let j = expr () in
                let p = perform (Symbol ")") in
                j
            )
        in
        if (perform (Decide ())) then (
            let i = factor () in
            let p = perform (Symbol "*") in
            let j = term () in
            i * j
        ) else (
            factor ()
        )
    in
    if (perform (Decide ())) then (
        let i = term () in
        let p = perform (Symbol "+") in
        let j = expr () in
        i + j
    ) else (
        term ()
    )
;;

(********************************
* Example
********************************)

let parseTest () =
    with allsols handle (with parse handle (
            expr ()
        )) ["4"; "3"; "*"; "("; "3"; "+"; "3"; ")"]
;;

let x = parseTest ()