module Primitives = Language.Primitives

let lift purity_aware arity op =
  if purity_aware then op else "(lift_" ^ arity ^ " " ^ op ^ ")"

let primitive_source purity_aware =
  let unary = lift purity_aware "unary"
  and binary = lift purity_aware "binary"
  and ternary = lift purity_aware "ternary" in
  function
  | Primitives.CompareEq -> binary "( = )"
  | Primitives.CompareGe -> binary "( >= )"
  | Primitives.CompareGt -> binary "( > )"
  | Primitives.CompareLe -> binary "( <= )"
  | Primitives.CompareLt -> binary "( < )"
  | Primitives.CompareNe -> binary "( <> )"
  | Primitives.FloatAcos -> unary "acos"
  | Primitives.FloatAdd -> binary "( +. )"
  | Primitives.FloatAsin -> unary "asin"
  | Primitives.FloatAtan -> unary "atan"
  | Primitives.FloatCos -> unary "cos"
  | Primitives.FloatDiv -> binary "( /. )"
  | Primitives.FloatExp -> unary "exp"
  | Primitives.FloatExpm1 -> unary "expm1"
  | Primitives.FloatInfinity -> "infinity"
  | Primitives.FloatLog -> unary "log"
  | Primitives.FloatLog1p -> unary "log1p"
  | Primitives.FloatMul -> binary "( *. )"
  | Primitives.FloatNaN -> "nan"
  | Primitives.FloatNeg -> binary "( ~-. )"
  | Primitives.FloatNegInfinity -> "neg_infinity"
  | Primitives.FloatOfInt -> unary "float_of_int"
  | Primitives.FloatSin -> unary "sin"
  | Primitives.FloatSqrt -> unary "sqrt"
  | Primitives.FloatSub -> binary "( -. )"
  | Primitives.FloatTan -> unary "tan"
  | Primitives.IntegerAdd -> binary "( + )"
  | Primitives.IntegerDiv -> binary "( / )"
  | Primitives.IntegerMod -> binary "( mod )"
  | Primitives.IntegerMul -> binary "( * )"
  | Primitives.IntegerNeg -> binary "( ~- )"
  | Primitives.IntegerAbs -> unary "abs"
  | Primitives.IntegerPow -> binary "( ** )"
  | Primitives.IntegerSub -> binary "( - )"
  | Primitives.IntOfFloat -> unary "int_of_float"
  | Primitives.StringConcat -> binary "( ^ )"
  | Primitives.StringLength -> unary "String.length"
  | Primitives.StringOfFloat -> unary "string_of_float"
  | Primitives.StringOfInt -> unary "string_of_int"
  | Primitives.StringSub -> ternary "sub"
  | Primitives.ToString -> unary "to_string"
