(* This example is described in Section 6.1 of "Programming with Algebraic Effects and
   Handlers" by A. Bauer and M. Pretnar. *)

(* An operation which makes a binary choice. *)

effect Decide : bool;;

(* The following piece of code chooses 10 or 20 for x and 0 or 5 for y,
   but since it is not wrapped in a handler it just produces a runtime
   error about an uncought operation:

   let x = (if perform (Decide ()) then 10 else 20) in
   let y = (if perform (Decide ()) then 0 else 5) in
     x - y;;
*)

(* If we wrap it in a handler which handles #Decide by
   passing true to the continuation, then x gets 10 and
   y gets 0. *)

handle
  let x = (if perform Decide then 10 else 20) in
  let y = (if perform Decide then 0 else 5) in
    x - y
with
| effect Decide k -> continue k true;;

match
  let x = (if perform Decide then 10 else 20) in
  let y = (if perform Decide then 0 else 5) in
  Some (x - y)
with
| effect Decide k -> continue k true
| Some v -> v
| None -> 0
;;

(* This handler collects all results that we can get by making different choices. *)

let choose_all = handler
  | effect Decide k -> continue k true @ continue k false
  | x -> [x];;

(* This returns a list of four possibilities [10; 5; 20; 15] *)

with choose_all handle
  let x = (if perform Decide then 10 else 20) in
  let y = (if perform Decide then 0 else 5) in
    x - y;;

effect Decide2 : bool;;

let choose_all2 = handler
  | effect Decide2 k -> continue k true @ continue k false
  | x -> [x];;

(* We can create two instances and handle each one separately. The inner handler produces
   two results in a list, and the outer handler then produces a list of two lists of two
   results, so the answer is [[10; 5]; [20; 15]]. *)

with choose_all handle
with choose_all2 handle
  let x = (if perform Decide then 10 else 20) in
  let y = (if perform Decide2 then 0 else 5) in
    x - y;;

(* If we switch the order of handlers and operations we also get a list of two lists of
   two results, but in a different order: [[10; 20]; [5; 15]] *)

with choose_all2 handle
with choose_all handle
  let y = (if perform Decide2 then 0 else 5) in
  let x = (if perform Decide then 10 else 20) in
    x - y;;

(* However, switching around only the handler but not the operations, produces a list of
   _four_ lists of two elements each: [[10; 20]; [10; 15]; [5; 20]; [5; 15]]
   Exercise: explain this. *)

with choose_all2 handle
with choose_all handle
  let x = (if perform Decide then 10 else 20) in
  let y = (if perform Decide2 then 0 else 5) in
    x - y;;
