(* This example is described in Section 6.8 of "Programming with Algebraic Effects and
   Handlers" by A. Bauer and M. Pretnar. *)

(* A version of ambivalent choice which tells how it found the desired value. *)

type 'a result = Failure | Success of 'a
  
type ('a, 'b) selection = effect
    operation select: 'a * 'b list -> 'b
 end

let select s v = handler
  | s#select (x,ys) k -> (fun cs ->
    (match assoc x cs with
     | Some y -> k y cs
     | None ->
         let rec try = function
           | [] -> Failure
           | y::ys ->
               (match k y ((x,y)::cs) with
                  | Success lst -> Success lst
                  | Failure -> try ys)
         in try ys))
  | val u -> (fun cs ->
      if u = v then Success cs else Failure)
  | finally f -> f [] ;;

(* Search for a Pythagorean triple. It finds a=5, b=12, c=13. *)
let s = new selection in
with select s true handle
  let a = s#select ("a", [5;6;7;8]) in
  let b = s#select ("b", [9;10;11;12]) in
  let c = s#select ("c", [13;14;15;16]) in
    a*a + b*b = c*c ;;

(* Martin Escardo's epsilon. *)

let epsilon p =
  let s = new selection in
  let r = (with select s true handle
             p (fun n -> s#select (n, [false; true])))
  in
    match r with
      | Failure -> (fun _ -> false)
      | Success lst ->
        (fun n -> match assoc n lst with
                  | None -> false | Some b -> b)
;;

(* From epsilon we can define existential and universal quantifiers. *)
let some p = p (epsilon p) ;;
let every p = not (p (epsilon (fun x -> not (p x)))) ;;

(* And equality on the Cantor space. *)
let equal x y = every (fun k -> x k = y k) ;;

(* A sample predicate. *)
let p x = (if x (10 ** 1000) then x (2 ** 30000) else not (x (3 ** 40000))) ;;

some p ;; (* true, answer found instantaneously *)

(* xor n x takes the exclusive or of x 0, x 1, ..., x n. *)
let rec xor n x =
  if n = 0 then x 0 else x n <> xor (n-1) x ;;

(* It is not much more difficult to get a witness for xor. *)
take (epsilon (xor 300)) 300 ;;

(* To get an example which takes some time we need a predicate
   whic is true only on a small portion of the entire space.*)
let rec is_alternating n b x =
  if n = 0 then x 0 = b else 
    let u = (x n = b) in
    let v = is_alternating (n-1) (not b) x in
      u && v ;;

take (epsilon (is_alternating 15 true)) 20 ;;
