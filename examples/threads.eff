(* This example is described in Section 6.10 of "Programming with Algebraic Effects and
   Handlers" by A. Bauer and M. Pretnar. *)

type coop = effect
  operation yield : unit -> unit
  operation fork : (unit -> unit) -> unit
end

let round_robin c =
  let threads = ref [] in
  let enqueue t = threads := !threads @ [t] in
  let dequeue () =
    match !threads with
    | [] -> ()
    | t :: ts -> threads := ts ; t ()
  in
  let rec scheduler () = handler
    | c#yield () k -> enqueue k ; dequeue ()
    | c#fork t k -> enqueue k ; with scheduler () handle t ()
    | val () -> dequeue ()
  in
    scheduler () ;;

(* An example of nested multithreading. We have a thread which prints
   the letter a and another one which has two sub-threads printing x and y. *)
let c = new coop in
with round_robin c handle
  c#fork (fun _ ->
    for i = 1 to 5 do
      print_string "a" ;
      c#yield ()
    done) ;
  let d = new coop in
  with round_robin d handle
    d#fork (fun _ ->
      for j = 1 to 5 do
         print_string "x" ;
         d#yield ()
    done) ;
    for k = 1 to 5 do
      print_string "y" ;
      d#yield () ;
      c#yield ()
    done
;;

(* We can run an unbounded amount of threads. The following example enumerates all
   reduced positive fractions less than 1 by forking a thread for each denominator. *)
let c = new coop in
let rec fractions denominator =
  (* For the next denominator *)
    c#fork (fun _ -> c#yield (); fractions (denominator + 1)) ;
    (* And list all the fractions with the current one *)
    for numerator = 1 to denominator - 1 do
      (* Print if the fraction is reduced. *)
      if gcd numerator denominator = 1 then
        print_string (to_string numerator ^ "/" ^ to_string denominator ^ ", ")
      else () ;
      c#yield ()
    done
in
with round_robin c handle
  fractions 1 ;;
