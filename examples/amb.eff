(* This example is described in Section 6.7 of "Programming with Algebraic Effects and
   Handlers" by A. Bauer and M. Pretnar. *)

type 'a result = Failure | Success of 'a

type 'a selection = effect
  operation select : 'a list -> 'a
end

let amb s = handler
  | s#select lst k ->
    let rec try = function
      | [] -> Failure
      | x::xs -> (match k x with
                    | Failure -> try xs
                    | Success y -> Success y)
    in
      try lst  ;;

(* The 8 queens problem. *)

let no_attack (x,y) (x',y') =
  x <> x' && y <> y' && abs (x - x') <> abs (y - y') ;;

let available x qs =
  filter (fun y -> forall (no_attack (x,y)) qs) [1;2;3;4;5;6;7;8] ;;

(* This one finds [(8, 4); (7, 2); (6, 7); (5, 3); (4, 6); (3, 8); (2, 5); (1, 1)]. *)
let s = new selection in
with amb s handle
  let rec place x qs =
    if x = 9 then Success qs else
      let y = s#select (available x qs) in
      place (x+1) ((x, y) :: qs)
  in place 1 [] ;;

(* This one does not work because state is handled outside amb. *)
let s = new selection in
with amb s handle
  let qs = ref [] in
  for x = 1 to 8 do
    let y = s#select (available x !qs) in
    qs := (x, y) :: !qs
  done ;
  Success !qs ;;

(* Watch this, it works and finds the same solution as the first one. *)
let s = new selection in
with amb s handle
  let qs = new ref in
  with state qs [] handle
    for x = 1 to 8 do
      let y = s#select (available x !qs) in
      qs := (x, y) :: !qs
    done ;
    Success !qs ;;

(* Breadth-first search. *)
let bfs s =
  let q = ref [] in
  handler
    | s#select lst k ->
      (q := !q @ (map (fun x -> (k,x)) lst) ;
       match !q with
        | [] -> Failure
        | (k,x) :: lst -> q := lst ; k x) ;;

(* We repeat 8-queen example with breadth-first-search. It is much slower
   than amb, which is not surprising. It still finds the same solution
   (which is what we would expect in this case). *)
let s = new selection in
with bfs s handle
  let rec place x qs =
    if x = 9 then Success qs else
      let y = s#select (available x qs) in
      place (x+1) ((x, y) :: qs)
  in place 1 [] ;;
