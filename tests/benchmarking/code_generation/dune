(include dune.inc)

(executables
 (names benchmark)
 (ocamlopt_flags
  (:standard -O3))
 (modes native)
 (modules
  (:standard \ generate_benchmark_rules))
 (libraries
  bechamel
  bechamel-notty
  notty
  notty.unix
  unix
  ocamlHeader
  (select
   config.ml
   from
   (!nativeMulticore -> "config.plain.ml")
   (nativeMulticore -> "config.multicore.ml"))))

(executable
 (modules generate_benchmark_rules)
 (name generate_benchmark_rules))

(env
 (dev
  (flags
   (:standard -w -a))))

(rule
 (targets dune.gen)
 (deps
  (source_tree .))
 (action
  (with-stdout-to
   %{targets}
   (run ./generate_benchmark_rules.exe))))

(rule
 (alias generate_benchmarks)
 (action
  (diff dune.inc dune.gen)))

(rule
 (deps
  (source_tree .))
 (targets benchmark.output)
 (action
  (with-stdout-to
   %{targets}
   (run ./benchmark.exe))))

(rule
 (deps
  (source_tree .)
  benchmark.output)
 (targets benchmark.output.version)
 (action
  (with-stdout-to
   %{targets}
   (pipe-outputs
    (run echo "Ocaml Version: %{ocaml_version}\n")
    (run cat - benchmark.output)))))

(rule
 (alias benchmark)
 (deps benchmark.output.version)
 (action
  (diff benchmark.expected benchmark.output.version)))
