type tree
 = Empty
 | Node of tree * int * tree

effect Choose : unit -> bool

let tester k =
    let leaf a = Node (Empty, a * k, Empty) in
    let bot t t2 =
      Node
        ( Node (Node (t, 0, t2), 2, leaf 13),
          5,
          Node (leaf 9, 7, Node (t2, 3, Node (leaf 3, 5, t2))) )
    in
    let n1 = Node (bot (leaf 3) (leaf 4), 10, bot (leaf 1) (leaf 3)) in
    let n2 = bot (Node (bot (leaf 3) (leaf 4), 10, bot (leaf 1) (leaf 3))) (leaf 10) in
    bot n1 n2

;;

let max a b = if a > b then a else b


let effect_max m =
  let rec find_max t = match t with 
  | Empty -> 0
  | Node (Empty, x, Empty) -> x
  | Node (left, x, right) -> 
    let next = if (perform (Choose ())) then find_max left else find_max right in
    (x + next)
  in
  let t = tester m in
  let h = handler 
  | x -> x
  | effect (Choose ()) k -> max (k true) (k false) 
  in
  with h handle (find_max t)

;;
let test_max m =
  effect_max m


let op x y = x - 3*y

let max a b = if a > b then a else b

type intlist = Nil | Cons of (int * intlist)

let rec ( @ ) xs ys =
  match xs with
  | Nil -> ys
  | Cons (x, xs) -> Cons (x, xs @ ys)


let test_general m = 
  let rec maxl acc = function
    | Nil -> acc
    | Cons(x, xs) -> maxl (max x acc ) xs
  in
  let t = tester m in
  let rec explore t = match t with
    | Empty -> 0
    | Node (left, x, right) -> 
      let next = if (perform (Choose ())) then (op x (explore left)) else op x (explore right) in
      next
  in
  let h = handler 
  | x -> Cons(x, Nil)
  | effect (Choose ()) k -> (k true) @ (k false) 
  in
  maxl 0 (with h handle explore t)


effect Get: unit -> int

let absurd void = (match void with)


let test_leaf_state m = 
  let rec maxl acc = function
  | Nil -> acc
  | Cons(x, xs) -> maxl (max x acc ) xs
  in
  let rec populate_leafs i n = 
    if i = n then Nil else 
    Cons(i*3, (populate_leafs (i+1) n))
  in
  let leafs = populate_leafs 0 154 in
  let t = tester m in
  let rec explore t = match t with
    | Empty -> perform (Get ())
    | Node (left, x, right) -> 
      let next = if (perform (Choose ())) then (op x (explore left)) else (op x (explore right)) in
      next
  in
  let h = handler 
  | x -> Cons(x, Nil)
  | effect (Choose ()) k -> (k true) @ (k false) 
  in
  let monad_state = handler
  | y -> (fun _ -> y)
  | effect (Get ()) k -> (
    fun s -> (match s with 
    | Cons(x, rest) -> (k x) rest
    | Nil -> -999
    )
  )
  in
  maxl 0 ((with monad_state handle ((with h handle explore t))) leafs)


(* 
# test_leaf_state 100;;
  - : int = 187924331 
*)
