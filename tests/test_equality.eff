1 = 1 ;;
1 = 2 ;;
(1,2) = (1,2) ;;
(2,1) = (1,2) ;;
[1;2;3] = [] ;;
[1;2;3] = [1;2;3] ;;

(* Comparing instances without resources *)
type cow = effect operation moo : unit -> unit end ;;
let x = new cow in
let y = new cow in
 ("no resource", x = x, x = y, y = y) ;;

(* Comparing instances with resources *)
let x = (new cow @ () with operation moo () @ () -> ((), ()) end) in
let y = (new cow @ () with operation moo () @ () -> ((), ()) end) in
 ("resource", x = x, x = y, y = y) ;;

(* Nested structures *)
type ('a,'b) rabbit = { eye : 'a; tail : 'b list } ;;

let x = ([1,2], {eye = 7; tail = []}) in
let y = ([1,3], {eye = 7; tail = []}) in
  ("nested", x = x, x = y, y = y) ;;
