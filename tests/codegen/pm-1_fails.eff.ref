type (_, _) eff_internal_effect += Decide : (unit, bool) eff_internal_effect

let _two_45 = 2

let two = _two_45

let _three_46 = 3

let three = _three_46

type intlist = IntNil | IntCons of (int * intlist)

;;
force_unsafe
  ((let rec _concat_48 _x_66 =
      match _x_66 with
      | IntNil -> fun (_ys_76 : intlist) -> _ys_76
      | IntCons (_z_78, _zs_77) ->
          fun (_ys_79 : intlist) -> IntCons (_z_78, _concat_48 _zs_77 _ys_79)
    in
    handler
      {
        value_clause = (fun (_x_60 : int) -> Value (IntCons (_x_60, IntNil)));
        effect_clauses =
          (fun (type a b) (eff : (a, b) eff_internal_effect) :
               (a -> (b -> _) -> _) ->
            match eff with
            | Decide ->
                fun () _l_67 ->
                  Value
                    (_concat_48
                       (coer_arrow coer_refl_ty force_unsafe _l_67 true)
                       (coer_arrow coer_refl_ty force_unsafe _l_67 false))
            | eff' -> fun arg k -> Call (eff', arg, k));
      })
     (let rec _f_63 _x_70 =
        Call (Decide, (), fun (_y_72 : bool) -> Value (if _y_72 then 2 else 3))
      in
      _f_63 ()))
