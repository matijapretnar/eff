effect Decide: unit -> bool;;
effect Decide2 : unit -> bool;;

handle
  let x = (if (perform (Decide ())) then 10 else 20) in
  let y = (if (perform (Decide ())) then 0 else 5) in
    x - y
with
| effect (Decide ()) k -> k true;;

let choose_all = handler
  | effect (Decide ()) k -> k true @ k false
  | x -> [x];;

with choose_all handle
  let x = (if perform (Decide ()) then 10 else 20) in
  let y = (if perform (Decide ()) then 0 else 5) in
    x - y;;

let choose_all2 = handler
  | effect (Decide2 ()) k -> k true @ k false
  |  x -> [x];;

with choose_all handle
with choose_all2 handle
  let x = (if perform (Decide ()) then 10 else 20) in
  let y = (if perform (Decide2 ()) then 0 else 5) in
    x - y;;

with choose_all2 handle
with choose_all handle
  let y = (if perform (Decide2 ()) then 0 else 5) in
  let x = (if perform (Decide ()) then 10 else 20) in
    x - y;;

with choose_all2 handle
with choose_all handle
  let x = (if perform (Decide ()) then 10 else 20) in
  let y = (if perform (Decide2 ()) then 0 else 5) in
    x - y;;


effect Fail : unit -> empty;;

let rec choose_int m n =
  if m > n then
    absurd (perform (Fail ()))
  else if perform (Decide ()) then
    m
  else
    choose_int (m + 1) n

let sqrt n =
  let rec find_root m =
    if m ** 2 > n then
      None
    else if m ** 2 = n then
      Some m
    else
      find_root (m + 1)
  in
  find_root 0

let pythagorean m n =
  let a = choose_int m (n - 1) in
  let b = choose_int a n in
  let a2b2 = a ** 2 + b ** 2 in
  match sqrt (a ** 2 + b ** 2) with
  | Some c -> (a, b, c)
  | None -> absurd (perform (Fail ()))

let backtrack = handler
| effect (Decide ()) k ->
    handle k false with
    | effect (Fail ()) _ -> k true

let choose_all =
    handler
    |  x -> [x]
    | effect (Decide ()) k -> (k true) @ (k false)
    | effect (Fail _) _ -> []

;;

with choose_all handle
  pythagorean 4 15
